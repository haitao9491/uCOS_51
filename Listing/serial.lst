C51 COMPILER V9.01   SERIAL                                                                05/31/2012 16:28:17 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE SERIAL
OBJECT MODULE PLACED IN .\Output\serial.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE BSP\serial.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing\serial.lst) OB
                    -JECT(.\Output\serial.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                                uC/OS-II
   4          *                                          The Real-Time Kernel
   5          *
   6          *                          (c) Copyright 1992-2002, Jean J. Labrosse, Weston, FL
   7          *                                           All Rights Reserved
   8          *
   9          *
  10          *                                           uCOS_51 for MCS-51
  11          *
  12          * File : serial.c
  13          * From : yang yi
  14          * Last modified by : QQ 591881218
  15          *********************************************************************************************************
  16          */
  17          
  18          #ifndef  OS_MASTER_FILE
  19          #include "..\ucos_51\ucos-ii\inc\includes.h"
  20          #endif
  21          
  22          unsigned char TxBuf[LenTxBuf],RxBuf[LenRxBuf];
  23          unsigned char *inTxBuf,*outTxBuf,*inRxBuf,*outRxBuf;
  24          bit TIflag=1;
  25          
  26          void InitSerial(void) REENTRANT // 串口初始化
  27          {
  28   1              TMOD=TMOD&0x0F;
  29   1              TMOD=TMOD|0x20; // 模式2(8位自动重装)，仅受TR1控制
  30   1              TH1=0xFD;TL1=0xFD, // CPU=22.1184MHz，波特率=19200，误差=0% 
  31   1              SCON=0x50;PCON=0x00; // 模式2，SM2=0，SMOD=0
  32   1              TR1=1;
  33   1      }
  34          
  35          void InitSerialBuffer(void) REENTRANT // 串口缓冲区初始化
  36          {
  37   1              inTxBuf=TxBuf;outTxBuf=TxBuf;
  38   1              inRxBuf=RxBuf;outRxBuf=RxBuf;
  39   1              ES=1;
  40   1      }
  41          
  42          void Serial(void) REENTRANT     // 串口中断服务子程序，中断在汇编中实现，去掉interrupt 4 
  43          {  
  44   1              unsigned char *t;
  45   1              
  46   1              /* 循环缓冲区 */
  47   1              if(TI){
  48   2                      TI=0;
  49   2                      if(inTxBuf==outTxBuf) {TIflag=1;return;} // TxBuf Empty
  50   2                      SBUF=*outTxBuf;outTxBuf++;
  51   2                      if(outTxBuf==TxBuf+LenTxBuf) outTxBuf=TxBuf;    
  52   2              }
  53   1              if(RI){
  54   2                      RI=0;
C51 COMPILER V9.01   SERIAL                                                                05/31/2012 16:28:17 PAGE 2   

  55   2                      t=inRxBuf;t++;
  56   2                      if(t==RxBuf+LenRxBuf) t=RxBuf;
  57   2                      if(t==outRxBuf) return; // RxBuf Full
  58   2                      *inRxBuf=SBUF;
  59   2                      inRxBuf=t;
  60   2              }
  61   1      }
  62          
  63          bit Getch(unsigned char *ch) REENTRANT // 从串口缓冲区读1字节数据
  64          {
  65   1      #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
                  OS_CPU_SR  cpu_sr;
              #endif
  68   1              
  69   1              OS_ENTER_CRITICAL();/* 进入临界区 */      
  70   1              if(inRxBuf==outRxBuf) {OS_EXIT_CRITICAL();/* 退出临界区 */return 0;} // RxBuf Empty
  71   1              *ch=*outRxBuf;outRxBuf++;
  72   1              if(outRxBuf==RxBuf+LenRxBuf) outRxBuf=RxBuf;  
  73   1              OS_EXIT_CRITICAL();/* 退出临界区 */     
  74   1              return 1;
  75   1      }
  76          
  77          void PrintChar(unsigned char ch) REENTRANT // 显示字符
  78          {
  79   1      #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
                  OS_CPU_SR  cpu_sr;
              #endif
  82   1      
  83   1              unsigned char *t;
  84   1      
  85   1              OS_ENTER_CRITICAL();/* 进入临界区 */
  86   1      
  87   1      /*
  88   1      #pragma ASM
  89   1          PUSH IE; // 保存中断状态
  90   1          CLR EA; // 关中断
  91   1      #pragma ENDASM
  92   1      */
  93   1      
  94   1              t=inTxBuf;t++;
  95   1              if(t==TxBuf+LenTxBuf) t=TxBuf;
  96   1              if(t==outTxBuf){
  97   2                      OS_EXIT_CRITICAL();/* 退出临界区 */
  98   2      
  99   2                      /*
 100   2                      #pragma ASM
 101   2                          POP IE;     // 恢复之前中断状态
 102   2                      #pragma ENDASM
 103   2                      */
 104   2      
 105   2                      return;
 106   2              } // TxBuf Full
 107   1              *inTxBuf=ch;
 108   1              inTxBuf=t;
 109   1      
 110   1              OS_EXIT_CRITICAL();/* 退出临界区 */
 111   1      
 112   1      /*
 113   1      #pragma ASM
 114   1          POP IE; // 恢复之前中断状态
 115   1      #pragma ENDASM
 116   1      */
C51 COMPILER V9.01   SERIAL                                                                05/31/2012 16:28:17 PAGE 3   

 117   1      
 118   1              if(TIflag){     
 119   2                      OS_ENTER_CRITICAL();/* 进入临界区 */    
 120   2                      TIflag=0;
 121   2                      OS_EXIT_CRITICAL();/* 退出临界区 */ 
 122   2                      TI=1; // 产生串口发送中断       
 123   2              }
 124   1      }
 125          
 126          void PrintStr(unsigned char *str) REENTRANT // 显示字符串
 127          { 
 128   1              int i;
 129   1              unsigned char j;
 130   1              unsigned char ch;
 131   1                      
 132   1      /*
 133   1      #pragma ASM
 134   1          PUSH IE;
 135   1          CLR EA;
 136   1      #pragma ENDASM
 137   1      */
 138   1          /* 本函数不需要临界保护 */
 139   1              for(i=0;i<MaxLenStr;i++){
 140   2                      ch=*(str+i);
 141   2                      if(ch=='\0') break;
 142   2                      else if(ch=='\n'){PrintChar(10);PrintChar(13);} 
 143   2                      else if(ch=='\t'){
 144   3                              for(j=0;j<TABNum;j++)
 145   3                                      PrintChar(' ');
 146   3                      }
 147   2                      else PrintChar(ch);
 148   2              }
 149   1      
 150   1      /*
 151   1      #pragma ASM
 152   1          POP IE;
 153   1      #pragma ENDASM
 154   1      */
 155   1      }
 156          
 157          void ClrScr(void) REENTRANT // 清屏
 158          {        
 159   1              PrintStr("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"); // 25个回车换行清屏
 160   1      }
 161          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    993    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =   2062    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
